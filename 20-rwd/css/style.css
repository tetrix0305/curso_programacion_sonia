/* ESTA ES LA MANERA MÁS COMPLICADA DE PONER UN MENÚ */

*, *::after, *::before, *:after *:before {
    box-sizing: border-box;
} /* Esta sería la instrucción completa para los navegadores y se pone así porque los after y before nunca están incluidos estos. Se escribe de esas dos maneras porque son las maneras en las que nos podemos encontrar estos dos pseudo-elementos. */


/* Reseteo de los valores del body y fuente general */
body {
    margin: 0;
    padding: 0;
    font-family: 'Lora', serif;
}

.main-header {
    /* display: flex; */
    /* justify-content: space-between; */ /* Esto se lleva uno a un extremo y otro al otro extremo. */
    /* align-items: center; */
    background-color: tomato;
    color: aqua;
    padding: 1rem 2rem 1rem 2rem;
    font-family: 'Quicksand', sans-serif;
    /* position: relative; */ /* lo ponemos para que actúe como origen de las coordenadas que vamos a dar */
}

/* Esto actúa como espacio de nombres. Es una manera de anidar */
/* Reseteo de los valores de h1 */
.main-header h1 { 
    margin: 0;
    padding: 0;
}

.main-header p {
    margin-bottom: 0;
    margin-top: 0,2rem;
    /* display: none; */ /* Hace que se pierda el espacio reservado para la etiqueta a la que se le aplique */
    /* visibility: hidden; */ /* No cambia el resto de los elementos porque respeta el espacio. */
}

/* .main-header:hover p {
    display: initial;
    visibility: initial;
} */

/* Reseteo de valores genéricos de cualquier menú */
.menu ol, .menu ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

.menu a {
    color: inherit;
    text-decoration: none;
}

/* Menú principal */
.main-menu {
    border: 1px solid;
    border-radius: 5px;
    width: fit-content;
    margin-top: 0.5rem;
}

.main-menu ol {
    display: flex;
}

.main-menu a {
    display: block; /* Le damos block porque a un elemento inline no le podemos dar padding. */
    padding: 0.7rem 1rem; /* Con ello aumentamos la parte clicleable del link */
}

/* Layout con display flex */

/* .content-wrapper {
    margin: 1rem;
    display: flex;
} */

/* Secciones principales */
.main-content {
    /* width: 70%; */
    /* Atajo para flex-grow, flex-shrink, flex basis */
    /* flex: 3 1 10%; */
    background-color: bisque;
    padding-left: 1rem;
    padding-right: 1rem;
    padding-top: 1rem;
    padding-bottom: 0.3rem;
}

.main-aside {
    /* width: 30%; */
    /* flex: 1 3 10%; */
    padding-left: 1rem;
    padding-right: 1rem;
    background-color: darkcyan;
}

/* CSS de la tabla */

table {
    width: 100%;
    empty-cells: hide;
    border-collapse: collapse;
}

table:hover {
    border-collapse: separate;
}

td, th {
    border: 1px solid yellow;
}

td {
    text-align: center;
}

/* CSS del footer */

.main-footer {
    background-color: tomato;
    color: aqua;
    /* padding-top: 1.2rem;
    padding-bottom: 1.5rem; */
    padding-top: 0.8rem;
    padding-bottom: 0.5rem;
    text-align: center;
}

.social-menu {
    margin-top: 1rem;
    margin-bottom: 1rem;
    font-size: 2.5rem;
}

.social-menu li {
    display: inline;
}

/* De aquí para arriba, sería la 1ª Media Query */

@media screen and (min-device-width: 640px) {
    .main-header {
        display:flex;
        justify-content: space-between;
        align-items: center;
    }
}  /* Esto sería RESPONSIVE. La propiedad device es para que detecte los dispositivos móviles, pero aunque el PC tenga el tamaño min no lo va a detectar y va a quedar mal. La norma global sería min-width, pero como el diseño para pantallas pequeñas es para dispositivos móviles, pondremos normalmente min-device-width. */

@media screen and (min-device-width: 920px) {
    .main-header {
        padding: 2rem;
    }

    .content-wrapper {
        margin: 2rem;
        display: flex;
    }

    .main-content {
        width: 70%;
    }

    .main-aside {
        width: 30%;
    }

    .main-footer {
        padding-top: 1.2rem;
        padding-bottom: 1.5rem;
    }
}